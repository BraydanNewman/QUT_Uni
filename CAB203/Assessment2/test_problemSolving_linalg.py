import os
import sys
import traceback
import warnings

# WARNING!  Do not edit this file!
# If modify this file then it might not catch errors in your project code.


# Keep track of modules that project uses so we can warn if there are any unsupported imports
modules_before = set(sys.modules.keys())
import problemSolvingLinalg as P
modules_after = set(sys.modules.keys())

# when running with Pytest, the current working directory may not be the one
# containing the script.  Find directory containing the script so we can
# easily find test files
scriptDirectory = os.path.dirname(__file__)

def closeEnough(a,b):
   print(a,b)
   tolerance = 0.01
   if a is None:
      print('Returned answer is None but it should be a dictionary.')
      return False
   
   if set(a.keys()) != set(b.keys()):
      print(f'Dictionaries have different sets of keys:\n{ set(a.keys())}\n{set(b.keys())}')
      return False
   r = all( abs(a[k] - b[k]) <= tolerance for k in a.keys() )
   if not r:
      print(f"Dictionaries' values are not within {tolerance} of each other\n{str(a)}\n{str(b)}" )
   return r

def testFertiliser_runs():
   P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 1, 1, 1)

def testFertiliser_single1():
   assert closeEnough(
         P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 7, 1, 6.5), 
         {
            'All purpose': 100,
            'Chicken manure': 0,
            'Cattle manure': 0
         })

def testFertiliser_single2():
   assert closeEnough(
         P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 1.2, 1.2, 1.8), 
         {
            'All purpose': 0,
            'Chicken manure': 100,
            'Cattle manure': 0
         })

def testFertiliser_single3():
   assert closeEnough(
         P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 0.5, 8.5, 0.95), 
         {
            'All purpose': 0,
            'Chicken manure': 0,
            'Cattle manure': 100
         })

def testFertiliser_1():
   assert closeEnough(
      P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 0.109, 0.289, 0.1295), 
      {
         'All purpose': 1,
         'Chicken manure': 2,
         'Cattle manure': 3
      })

def testFertiliser_2():
   assert closeEnough(
      P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 8.7, 10.7, 9.25), 
      {
         'All purpose': 100,
         'Chicken manure': 100,
         'Cattle manure': 100
      })

def testFertiliser_3():
   assert closeEnough(
      P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 0.155, 0.275, 0.1585), 
      {
         'All purpose': 2,
         'Chicken manure': 0,
         'Cattle manure': 3
      })
   
def testFertiliser_4():
   assert closeEnough(
      P.fertiliser(os.path.join(scriptDirectory, 'fertiliser2.csv'), 0.5637, 0.8549, 0.2232), 
      {
         'Diammonium Phosphate': 1.04,
         'Nitrophos': 0.99,
         'Chicken manure': 12.40,
      })

def testFertiliser_5():
   assert closeEnough(
      P.fertiliser(os.path.join(scriptDirectory, 'fertiliser2.csv'), 1.20772, 2.08692, 0.02538), 
      {
         'Diammonium Phosphate': 3.14,
         'Nitrophos': 2.72,
         'Chicken manure': 1.41,
      })

def testFertiliser_6():
   assert closeEnough(
      P.fertiliser(os.path.join(scriptDirectory, 'fertiliser2.csv'), 0.7, 0.7, 1), 
      {
         'Diammonium Phosphate': 0,
         'Nitrophos': 0.14,
         'Chicken manure': 55.56,
      })

def testFertiliser_error1():
   
   assert P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 0.63, 0.083, 0.0565) == None

def testFertiliser_error2():
   assert P.fertiliser(os.path.join(scriptDirectory, 'fertiliser1.csv'), 0.305, 0.165, 0.4155) == None

def testFertiliser_error3():
   assert P.fertiliser(os.path.join(scriptDirectory, 'fertiliser2.csv'), 1, 2, 3) == None

def testFertiliser_error4():
   assert P.fertiliser(os.path.join(scriptDirectory, 'fertiliser3.csv'), 1, 2, 3) == None

def testFertiliser_error5():
   assert P.fertiliser(os.path.join(scriptDirectory, 'fertiliser4.csv'), 1, 2, 3) == None


def testVersionOK():
   if sys.version_info[0] != 3:
      warnings.warn("You are using Python version 2.  You need to use Python version 3.9 or higher.")
      sys.exit()
   minor = sys.version_info[1]
   if minor < 9:
      warnings.warn(f"You are using Python version 3.{minor}.  Use Python version 3.9 or higher.")
   
   if minor > 10:
      warnings.warn(f"You are using Python version 3.{minor}.  The marking environment uses Python version 3.10.  Be careful not to use language features from later versions.")

def testModulesOK():
   allowed_modules = { 'probability','digraphs', 'csv', 'graphs', 'collections', 're', 'numpy', 'problemSolvingLinalg', 'typing',  'pickle', 'cython_runtime', 'hashlib', 'hmac', 'secrets', 'ctypes' }
   usedModules = modules_after - modules_before
   problemModules = { m for m in usedModules if m[0] != '_' and m.split('.')[0] not in allowed_modules }
   if problemModules:
      warnings.warn(f"You have imported one or more modules which are not on the list of pre-approved modules.  Please check that it is needed and gain approval from the unit coordinator.  In some cases these may be imported by another module, eg. numpy, in which case there is no problem.\nImported modules: {problemModules}")
      

if __name__ == "__main__":      
   testsToDo =  { name: f for name, f in locals().items() if callable(f) and name.startswith('test') }
   allpassed = True
   numpassed = 0
   for name, test in testsToDo.items():
      print(f'Running {name}...')
      try:
         test()
         print('Passed.')
         numpassed += 1
      except AssertionError as e:
         allpassed = False
         
         traceback.print_exc()
         print(e)         
         print(f'Failed {name}.')
      print('----------------------------------------------------------------------------------------')
   
   print(f'Passed {numpassed} out of {len(testsToDo)} tests.')
   if allpassed: 
      print('All tests passed.')
   else:
      print('There were failed tests.')

   print(f'Python version {sys.version}')

