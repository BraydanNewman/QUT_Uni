import os
import sys
import traceback
import warnings

# WARNING!  Do not edit this file!
# If modify this file then it might not catch errors in your project code.


# Keep track of modules that project uses so we can warn if there are any unsupported imports
modules_before = set(sys.modules.keys())
import project as P

modules_after = set(sys.modules.keys())

# when running with Pytest, the current working directory may not be the one
# containing the script.  Find directory containing the script so we can
# easily find test files
scriptDirectory = os.path.dirname(__file__)


# Question 1

def testGamesOK_runs():
    r = P.gamesOK({('Alice', 'Bob'), ('Bob', 'Charlie')})


def testGamesOK_1():
    assert P.gamesOK({('Alice', 'Bob'), ('Bob', 'Charlie')}) == True


def testGamesOK_2():
    assert P.gamesOK({('Alice', 'Bob'), ('Bob', 'Charlie'), ('Charlie', 'Denise')}) == False


def testGamesOK_3():
    assert P.gamesOK({('Alice', 'Bob'), ('Charlie', 'Denise')}) == False


def testGamesOK_4():
    assert P.gamesOK({
        ('Alice', 'Bob'),
        ('Bob', 'Charlie'),
        ('Alice', 'Charlie'),
        ('Evalyn', 'Charlie'),
        ('Joy', 'Evalyn'),
        ('Joy', 'Alice'),
        ('Waymond', 'Joy'),
        ('Waymond', 'Charlie')
    }) == True


def testGamesOK_5():
    assert P.gamesOK({
        ('Alice', 'Bob'),
        ('Bob', 'Charlie'),
        ('Alice', 'Charlie'),
        ('Evalyn', 'Charlie'),
        ('Joy', 'Evalyn'),
        ('Joy', 'Alice'),
        ('Waymond', 'Joy'),
    }) == False


# Question 2

def testPotentialReferees_runs():
    P.potentialReferees(os.path.join(scriptDirectory, 'referees1.csv'), 'Ashley', 'Douglas')


def testPotentialReferees_1():
    assert P.potentialReferees(os.path.join(scriptDirectory, 'referees1.csv'), 'Ashley', 'Douglas') == {'Rene', 'David'}


def testPotentialReferees_2():
    assert P.potentialReferees(os.path.join(scriptDirectory, 'referees1.csv'), 'Ashley', 'Ellie') == set()


def testPotentialReferees_3():
    assert P.potentialReferees(os.path.join(scriptDirectory, 'referees2.csv'), 'Gong Gong', 'Jobu Tupaki') == {
        'Waymond', 'Deirdre'}


def testPotentialReferees_4():
    assert P.potentialReferees(os.path.join(scriptDirectory, 'referees2.csv'), 'Deirdre', 'Evalyn') == set()


def testPotentialReferees_5():
    assert P.potentialReferees(os.path.join(scriptDirectory, 'referees2.csv'), 'Gong Gong', 'Evalyn') == set()


# Question 3 

def testGameReferees_runs():
    games = {('Alice', 'Bob'): {'David', 'Ellen'},
             ('Bob', 'Charlie'): {'David'}}
    P.gameReferees(games)


def testGameReferees_1():
    games = {('Alice', 'Bob'): {'David', 'Ellen'},
             ('Bob', 'Charlie'): {'David'}}
    assert P.gameReferees(games) == {('Alice', 'Bob'): 'Ellen', ('Bob', 'Charlie'): 'David'}


def testGameReferees_2():
    games = {('Alice', 'Bob'): {'David'},
             ('Bob', 'Charlie'): {'David'}}
    assert P.gameReferees(games) == None


def testGameReferees_3():
    games = {('Joy', 'Jobu Tupaki'): {'Deirdre', 'Gong Gong'},
             ('Waymond', 'Deirdre'): {'Gong Gong', 'Jobu Tupaki'},
             ('Gong Gong', 'Joy'): {'Deirdre'}
             }

    assert P.gameReferees(games) == {
        ('Gong Gong', 'Joy'): 'Deirdre',
        ('Joy', 'Jobu Tupaki'): 'Gong Gong',
        ('Waymond', 'Deirdre'): 'Jobu Tupaki'}


def testGameReferees_4():
    games = {('Joy', 'Jobu Tupaki'): {'Deirdre', 'Gong Gong'},
             ('Waymond', 'Deirdre'): {'Gong Gong', 'Jobu Tupaki'},
             ('Gong Gong', 'Joy'): {'Deirdre'},
             ('Evalyn', 'Jobu Tupaki'): set()
             }

    assert P.gameReferees(games) == None


def testGameReferees_5():
    games = {('Joy', 'Jobu Tupaki'): {'Deirdre', 'Gong Gong'},
             ('Waymond', 'Deirdre'): {'Gong Gong', 'Jobu Tupaki'},
             ('Gong Gong', 'Joy'): {'Deirdre'},
             ('Evalyn', 'Jobu Tupaki'): {'Gong Gong'}
             }

    assert P.gameReferees(games) == None


# Question 4

def testGameSchedule_runs():
    P.gameSchedule({('Alice', 'Bob'): 'Rene'})


def testGameSchedule_1():
    assert P.gameSchedule({('Alice', 'Bob'): 'Rene'}) == [{('Alice', 'Bob', 'Rene')}]


def checkSchedule(schedule, numgames):
    assert sum(len(timeslot) for timeslot in schedule) == numgames
    for timeslot in schedule:
        for u in timeslot:
            for v in timeslot:
                if u != v:
                    assert set(u).isdisjoint(set(v))
        for t2 in schedule:
            if t2 != timeslot:
                assert timeslot.isdisjoint(t2)


def testGameSchedule_2():
    schedule = P.gameSchedule({('Alice', 'Bob'): 'Rene', ('Elaine', 'Charlie'): 'Dave'})
    assert len(schedule) == 1
    checkSchedule(schedule, 2)


def testGameSchedule_3():
    schedule = P.gameSchedule({
        ('Alice', 'Bob'): 'Rene',
        ('Elaine', 'Charlie'): 'Dave',
        ('Rene', 'Elaine'): 'Alice',
        ('Dave', 'Bob'): 'Charlie'
    })
    assert len(schedule) == 2
    checkSchedule(schedule, 4)


def testGameSchedule_4():
    schedule = P.gameSchedule({
        ('Alice', 'Bob'): 'Rene',
        ('Elaine', 'Charlie'): 'Dave',
        ('Rene', 'Elaine'): 'Alice',
        ('Dave', 'Bob'): 'Charlie',
        ('Alice', 'Rene'): 'Dave'
    })
    assert len(schedule) == 3
    checkSchedule(schedule, 5)


def testGameSchedule_5():
    schedule = P.gameSchedule({
        ('Alice', 'Bob'): 'Rene',
        ('Elaine', 'Charlie'): 'Dave',
        ('Rene', 'Elaine'): 'Alice',
        ('Dave', 'Bob'): 'Charlie',
        ('Alice', 'Rene'): 'Dave',
        ('Dave', 'Elaine'): 'Rene'
    })
    assert len(schedule) == 4
    checkSchedule(schedule, 6)


def test_lol():
    checkSchedule([
        {("E", "C", "D"), ("A", "B", "R")},
        {("D", "B", "C"), ("R", "E", "A")},
        {("A", "R", "D")},
        {("D", "E", "R")},
    ], 6)


# Question 5

def testRanking_runs():
    P.ranking({('Alice', 'Bob'), ('Bob', 'Charlie')})


def testRanking_1():
    assert P.ranking({('Alice', 'Bob'), ('Bob', 'Charlie')}) == ['Alice', 'Bob', 'Charlie']


def testRanking_2():
    assert P.ranking({('Alice', 'Bob'), ('Bob', 'Charlie'), ('Charlie', 'Alice')}) == None


def testRanking_3():
    assert P.ranking({
        ('Evalyn', 'Jobu Tupaki'),
        ('Waymond', 'Evalyn'),
        ('Evalyn', 'Gong Gong'),
        ('Evalyn', 'Joy'),
        ('Joy', 'Gong Gong'),
        ('Jobu Tupaki', 'Joy')
    }) == ['Waymond', 'Evalyn', 'Jobu Tupaki', 'Joy', 'Gong Gong']


def testRanking_4():
    assert P.ranking({
        ('Evalyn', 'Jobu Tupaki'),
        ('Waymond', 'Evalyn'),
        ('Evalyn', 'Gong Gong'),
        ('Evalyn', 'Joy'),
        ('Joy', 'Gong Gong'),
        ('Jobu Tupaki', 'Joy'),
        ('Jobu Tupaki', 'Waymond')
    }) == None


def testRanking_5():
    assert P.ranking({
        ('Evalyn', 'Jobu Tupaki'),
        ('Evalyn', 'Waymond'),
        ('Evalyn', 'Gong Gong'),
        ('Evalyn', 'Joy'),
        ('Joy', 'Gong Gong'),
        ('Waymond', 'Joy'),
        ('Jobu Tupaki', 'Joy'),
        ('Jobu Tupaki', 'Waymond')
    }) == ['Evalyn', 'Jobu Tupaki', 'Waymond', 'Joy', 'Gong Gong']


def testVersionOK():
    if sys.version_info[0] != 3:
        warnings.warn("You are using Python version 2.  You need to use Python version 3.9 or higher.")
        sys.exit()
    minor = sys.version_info[1]
    if minor < 9:
        warnings.warn(f"You are using Python version 3.{minor}.  Use Python version 3.9 or higher.")

    if minor > 10:
        warnings.warn(
            f"You are using Python version 3.{minor}.  The marking environment uses Python version 3.10.  Be careful not to use language features from later versions.")


def testModulesOK():
    allowed_modules = {'typing.re', 'digraphs', 'project', 'typing', 'csv', 'graphs', 'collections.abc', 'typing.io',
                       '_csv', 're'}
    if not (modules_after - modules_before).issubset(set(allowed_modules)):
        warnings.warn(
            f"You have imported one or more modules which are not on the list of pre-approved modules.  Please check that it is needed and gain approval from the unit coordinator.\nImported modules: {modules_after - modules_before}")


if __name__ == "__main__":
    testsToDo = {name: f for name, f in locals().items() if callable(f) and name.startswith('test')}
    allpassed = True
    numpassed = 0
    for name, test in testsToDo.items():
        print(f'Running {name}...')
        try:
            test()
            print('Passed.')
            numpassed += 1
        except AssertionError as e:
            allpassed = False

            traceback.print_exc()
            print(e)
            print(f'Failed {name}.')
        print('----------------------------------------------------------------------------------------')

    print(f'Passed {numpassed} out of {len(testsToDo)} tests.')
    if allpassed:
        print('All tests passed.')
    else:
        print('There were failed tests.')

    print(f'Python version {sys.version}')
